function solution(n, arr) {
  let answer = 0;
  let dx = [-1, -1, 0, 1, 1, 1, 0, -1];
  let dy = [0, 1, 1, 1, 0, -1, -1, -1];
  let queue = [];

  // 격자판 탐색
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      // 격자판의 특정 위치가 1일 때 섬의 시작이기 때문에 queue에 해당 좌표를 push하고, 해당 위치를 바다로(0) 만들어주고, BFS 탐색이 모두 끝나면 하나의 섬 탐색이 완료되기 때문에 answer++
      if (arr[i][j] === 1) {
        queue.push([i, j]);
        arr[i][j] = 0;
        answer++;
        // 하나의 BFS 탐색이 호출 되었을 때, queue가 비게 될 때 까지 while loop
        while (queue.length) {
          // queue에 push한 같은 섬의 위치를 꺼냄
          let [x, y] = queue.shift();

          // 8방향 탐색
          for (let k = 0; k < 8; k++) {
            let nx = x + dx[k];
            let ny = y + dy[k];

            // 격자판을 내부 위치와 다음 x값과 y값이 섬(1)인지 확인 후, 다음 위치가 섬이라면 바다(0)로 바꿔주고 위치를 queue에 push
            // 8방향으로 탐색하기 때문에 인접한 섬이 없다면 queue가 결국 비게 되고 해당 BFS 탐색 종료 후, 다시 격자판 탐색
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && arr[nx][ny] === 1) {
              arr[nx][ny] = 0;
              queue.push([nx, ny]);
            }
          }
        }
      }
    }
  }

  return answer;
}

console.log(
  solution(7, [
    [1, 1, 0, 0, 0, 1, 0],
    [0, 1, 1, 0, 1, 1, 0],
    [0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 1, 1],
    [1, 1, 0, 1, 1, 0, 0],
    [1, 0, 0, 0, 1, 0, 0],
    [1, 0, 1, 0, 1, 0, 0],
  ])
);

/**
 * 섬나라 아일랜드
 *
 * N*N의 섬나라 아일랜드의 지도가 격자판의 정보로 주어집니다. 각 섬은 1로 표시되어 상하좌 우와 대각선으로 연결되어 있으며, 0은 바다입니다.
 * 섬나라 아일랜드에 몇 개의 섬이 있는지 구하는 프로그램을 작성하세요.
 * ▣ 입력설명
 * 첫 번째 줄에 자연수 N(3<=N<=20)이 주어집니다. 두 번째 줄부터 격자판 정보가 주어진다.
 *
 * ▣ 출력설명
 * 첫 번째 줄에 섬의 개수를 출력한다.
 *
 * ▣ 입력예제 1
 * 7
 * 1100010
 * 0110110
 * 0100000
 * 0001011
 * 1101100
 * 1000100
 * 1010100
 *
 * ▣ 출력예제 1
 * 5
 */
