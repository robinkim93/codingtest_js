function solution(s, e) {
  let answer;
  let queue = [];
  let dis = Array.from({ length: 10001 }, () => 0);
  let ch = Array.from({ length: 10001 }, () => 0);

  // 현수의 첫 위치의 레벨(거리)을 0으로 초기화
  dis[s] = 0;
  // 현수의 첫 위치의 값을 중복해서 계산하지 않도록 체크
  ch[s] = 1;
  // 현수의 첫 위치를 꺼내서 사용하기 위해 queue에 첫 push
  queue.push(s);

  while (queue.length) {
    let x = queue.shift();
    for (let nx of [x + 1, x - 1, x + 5]) {
      // x=9이고 dis[x] = 2일 때, dis[9+1] / dis[9-1] / dis[9+5] 인 dis[10] / dis[8] / dis[14]는 3이 된다.
      // dis[10] / dis[8]의 루프는 하단의 if문을 통과한다.
      // dis[14]가 되었을 때, 아직 dis[nx]에 값을 할당하지 못한다 (하단 if문에 걸려서 dis[nx] 좌표에 거리를 남기지 못한다.)
      // 그렇기 때문에 dis[x]에 1을 더하는 로직을 작성해서 거리가 3인 것을 return 할 수 있다.
      if (nx === e) return (answer = dis[x] + 1);
      if (nx > 0 && nx <= 10000 && ch[nx] === 0) {
        // 다음 x 좌표에 체크 (같은 값은 탐색해도 계속 같은 값이 도출되기 때문에 탐색 하지 않도록 체크)
        // ex) 5라는 x에 x+1, x-1, x+5를 계속해도 이 전에 탐색 값과 달라지지 않기 때문에 이 전에 탐색한 값이라면 굳이 탐색하지 않아도 됨.
        ch[nx] = 1;
        // queue에 다음 x좌표를 push해서 x에서 계속 꺼내서 탐색해 내려갈 수 있도록 함
        queue.push(nx);
        // 다음 x좌표의 거리를 구하기 위해서 이전에 루프에서는 다음 x좌표였던 값에 남긴 값에 1을 더해 이 전 x좌표에서 한 번 더 움직였다는 값을 남김.
        // 여기에서 남긴 dis 배열의 nx 번째 요소의 값은 결과가 도출되지 않았을 때, 다음 루프에서 dis[x] 값으로 사용된다.
        // ex) x=5 일 때, dis[5+1] / dis[5-1] / dis[5+5]인 dis[6] / dis[4] / dis[10]의 값을 1이라고 저장했을 때
        // 다음 특정 루프에서 x=6 이 되었을 때, dis[6+1] / dis[6-1] / dis[6+5]인 dis[7] / dis[5] / dis[11]의 값은 dis[6]의 1에 1을 더한 2가 된다.
        dis[nx] = dis[x] + 1;
      }
    }
  }

  return answer;
}

console.log(solution(5, 14));

/**
 * 송아지 찾기
 *
 * 현수는 송아지를 잃어버렸다. 다행히 송아지에는 위치추적기가 달려 있다.
 * 현수의 위치와 송아지의 위치가 수직선상의 좌표 점으로 주어지면 현수는 현재 위치에서 송아지의 위치까지 다음과 같은 방법으로 이동한다. 송아지는 움직이지 않고 제자리에 있다.
 * 현수는 스카이 콩콩을 타고 가는데 한 번의 점프로 앞으로 1, 뒤로 1, 앞으로 5를 이동할 수 있다. 최소 몇 번의 점프로 현수가 송아지의 위치까지 갈 수 있는지 구하는 프로그램을 작성 하세요.
 *
 * ▣ 입력설명
 * 첫 번째 줄에 현수의 위치 S와 송아지의 위치 E가 주어진다. 직선의 좌표 점은 1부터 10,000 까지이다.
 *
 * ▣ 출력설명
 * 점프의 최소횟수를 구한다. 답은 1이상입니다.
 *
 * ▣ 입력예제 1
 * 5 14
 *
 * ▣ 출력예제 1
 * 3
 *
 * ▣ 입력예제 2
 * 8 3
 *
 * ▣ 출력예제 2
 * 5
 */
