function solution(n) {
  /**
   * 함수는 콜 스택이라는 스택에 쌓인다.
   * n이 3일 때, solution이라는 함수는 DFS(3)의 함수를 호출한다.
   * DFS 함수 내부에서 n을 먼저 출력하고, 다시 DFS 함수 본인을 호출하는데 3 - 1을 호출한다.
   * 이 순서를 통해 0이 될 때 까지 돌고 출력의 순서는 3, 2, 1이 된다.
   * 이 때, 출력하는 console.log를 DFS 재귀호출의 하단으로 내리면 출력의 순서가 1, 2, 3이 된다.
   *
   * 이유는, 호출이 먼저 일어나면 출력하는 console.log를 실행하지 않고 다시 자기 자신을 실행한다.
   * 실행한 함수들을 콜 스택에 쌓인다 (아래부터 DFS(3), DFS(2), DFS(1), DFS(0) 순서로)
   * 이 때, 스택 프레임에는 매개변수, 지역변수, 복귀 주소 등이 저장되는데 복귀 주소는 함수가 실행된 위치로 돌아가고
   * 돌아가서 그 아래에 있는 코드를 계속 실행해 나갈 수 있게 한다.
   *
   * 스택은 가장 먼저 들어온 스택이 가장 늦게 나가는 자료구조이기 때문에 DFS(0)이 가장 먼저 실행된다. 이 때 0은 바로 return
   * DFS(1)는 DFS(1)의 실행 주소로 돌아가고 하단에 있는 console.log를 실행하고 1이 출력된다.
   * DFS(2)는 DFS(2)의 실행 주소로 돌아가고 하단에 있는 console.log를 실행하고 2가 출력된다.
   *
   * 이 순서로, 출력 위치에 따라 출력되는 값의 순서가 바뀐다.
   *
   */

  const DFS = (n) => {
    if (n === 0) return;
    DFS(n - 1);
    console.log(n);
  };

  DFS(n);
}

console.log(solution(3));

/**
 * 재귀 함수
 *
 * 자연수 N이 입력되면 재귀함수를 이용하여 1부터 N까지를 출력하는 프로그램을 작성하세요.
 *
 * ▣ 입력설명
 * 첫 번째 줄은 정수 N(3<=N<=10)이 입력된다.
 *
 * ▣ 출력설명
 * 첫째 줄에 출력한다.
 *
 * ▣ 입력예제 1
 * 3
 *
 * ▣ 출력예제 1
 * 1 2 3
 */
